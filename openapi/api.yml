openapi: "3.0.0"
info:
  description: Application store API for DLUHC Funding Service Design
  version: "0.1.0"
  title: Funding Service Design - Application Store
tags:
  - name: application-store
    description: Application store operations

paths:
  /applications:
    get:
      tags:
        - applications
      summary: Search applications
      description: List all applications
      operationId: api.ApplicationsView.get
      responses:
        200:
          description: SUCCESS - A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Application'
      parameters:
        - in: query
          name: application_id
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: account_id
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: fund_id
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: round_id
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: status_only
          style: form
          schema:
            type: string
          required: false
          explode: false
        # - filtering applications
        - in: query
          name: order_by
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: order_rev
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: forms
          style: form
          schema:
            type: boolean
          required: false
          explode: false
    post:
      tags:
        - applications
      summary: Post a new application
      description: Registers a new application for a user
      operationId: api.ApplicationsView.post
      requestBody:
        description: Application creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostApplication'
            example:
              account_id: 'usera'
              fund_id: '47aef2f5-3fcb-4d45-acb5-f0152b5f03c4'
              round_id: 'c603d114-5364-4474-a0c4-c41cbf4d3bbd'
              language: 'en'
      responses:
        201:
          description: SUCCESS - Application created
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/CreatedApplication'
        401:
          description: ERROR - Could not create application
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'An assessment for this application already exists'

  /applications/{application_id}:
    get:
      tags:
        - applications
      summary: Get a specific application
      description: Get a specific application by application id
      operationId: api.ApplicationsView.get_by_id
      responses:
        200:
          description: SUCCESS - An applicaton by id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/ReturnedApplication'
        404:
          description: ERROR - Application cannot be found.
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 404
                status: 'error'
                message: 'Application corresponding to id not found.'
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: string
            format: path

  /applications/forms:
    put:
      requestBody:
        description: Update application with new forms state
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PutForms'
      tags:
        - applications
      summary: Update an application with new forms state
      description: Updates the form state of an application
      operationId: api.ApplicationsView.put
      responses:
        201:
          description: SUCCESS - Application updated
          content:
              application/json:
                schema:
                  $ref: 'components.yml#/components/schemas/UpdatedForms'
        404:
          description: ERROR - Form cannot be updated
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 404
                status: 'error'
                message: 'Form is not updated'

  /applications/{application_id}/submit:
    post:
      tags:
        - applications
      summary: Submit an application
      description: Application is submitted and cannot be changed from frontend
      operationId: api.ApplicationsView.submit
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: string
            format: path
        - name: dont_send_email
          in: query
          required: false
          description: Whether to send an email notification for the submitted application
          schema:
            type: boolean
      responses:
        201:
          description: Application has been submitted successfully
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/SubmittedApplication'
        404:
          description: ERROR - Application cannot be submitted.
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 404
                status: 'error'
                message: 'Application corresponding to id not found.'

  /applications/reporting/applications_statuses_data:
    get:
      tags:
        - reporting
      summary: Get report on started and submitted applications
      description: Get report on started and submitted applications
      operationId: api.ApplicationsView.get_applications_statuses_report
      parameters:
        - name: round_id
          in: query
          description: Optional round ID to filter by
          schema:
            type: array
            items:
              type: string
        - name: fund_id
          in: query
          description: Optional fund ID to filter by
          schema:
            type: array
            items:
              type: string
        - name: format
          in: query
          description: Optional format specifier, csv or json
          schema:
            type: string
            enum: [csv,json]
      responses:
        200:
          description: SUCCESS - Here is the status report on applications
          content:
            text/csv: {}
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/StatusReport'
        404:
          description: ERROR - Could not get report
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'

  /applications/reporting/key_application_metrics:
    get:
      tags:
        - reporting
      summary: Get the key data report on applications
      description: Get the key data report on applications
      operationId: api.ApplicationsView.get_key_applications_data_report
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: round_id
          in: query
          description: Optional round ID to filter by
          schema:
            type: string
        - name: fund_id
          in: query
          description: Optional fund ID to filter by
          schema:
            type: string
      responses:
        200:
          description: SUCCESS - Here is the report on applications
          content:
            text/csv: {}
        404:
          description: ERROR - Could not get report
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'

  /applications/reporting/key_application_metrics/{application_id}:
    get:
      tags:
        - reporting
      summary: Get the key data report on an application
      description: Get the key data report on an application
      operationId: api.ApplicationsView.get_key_application_data_report
      responses:
        200:
          description: SUCCESS - Here is the report on requested application
          content:
            text/csv: {}
        404:
          description: ERROR - Could not get report
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: string
            format: path

  /application/feedback:
    post:
      tags:
        - feedback
      summary: Post a new feedback
      description: Create a new feedback entry
      operationId: api.ApplicationsView.post_feedback
      requestBody:
        description: Feedback creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostFeedback'
            example:
              application_id: '47aef2f5-3fcb-4d45-acb5-f0152b5f03c4'
              fund_id: '47aef2f5-3fcb-4d45-acb5-f0152b5f03c4'
              round_id: 'c603d114-5364-4474-a0c4-c41cbf4d3bbd'
              section_id: 'section_1'
              feedback_json: {"comment": "Great work!", "rating": 5}
              status: "NOT_STARTED"
      responses:
        201:
          description: SUCCESS - Feedback created
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Feedback'
        401:
          description: ERROR - Could not create feedback
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Could not create feedback'

    get:
      tags:
        - feedback
      summary: Search feedback entries
      description: List all feedback entries
      operationId: api.ApplicationsView.get_feedback_for_section
      responses:
        200:
          description: SUCCESS - A list of feedback entries
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/Feedback'
      parameters:
        - in: query
          name: application_id
          style: form
          schema:
            type: string
          required: true
          explode: false
        - in: query
          name: section_id
          style: form
          schema:
            type: string
          required: true
          explode: false
        - in: query
          name: fund_id
          style: form
          schema:
            type: string
          required: false
          explode: false
        - in: query
          name: round_id
          style: form
          schema:
            type: string
          required: false
          explode: false

  /application/end_of_application_survey_data:
    post:
      tags:
        - survey
      summary: Post end of application survey data
      operationId: api.ApplicationsView.post_end_of_application_survey_data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostEndOfApplicationSurveyDataRequest'
      responses:
        201:
          description: SUCCESS - Survey data saved
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/GetEndOfApplicationSurveyDataResponse'
        400:
          description: ERROR - Bad request
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'

    get:
      tags:
        - survey
      summary: Get end of application survey data
      operationId: api.ApplicationsView.get_end_of_application_survey_data
      parameters:
        - in: query
          name: application_id
          required: true
          schema:
            type: string
          description: ID of the application
        - in: query
          name: page_number
          required: true
          schema:
            type: integer
          description: Page number of the survey data
      responses:
        200:
          description: SUCCESS - Survey data retrieved
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/GetEndOfApplicationSurveyDataResponse'
        404:
          description: ERROR - Survey data not found
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'

  /queue_for_assessment/{application_id}:
    post:
      tags:
        - SQS (queues)
      summary: post an application (if it has the status submitted) to the assessment import queue
      description: post an application (if it has the status submitted) to assessment import queue
      operationId: api.QueueView.post_submitted_application_to_assessment
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: string
            format: path
      responses:
        200:
          description: SUCCESS - message sent
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  properties:
                    sent:
                      type: boolean
        500:
          description: ERROR - Application cannot be found.
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 500
                status: 'error'
                message: 'Message could not be staged'
